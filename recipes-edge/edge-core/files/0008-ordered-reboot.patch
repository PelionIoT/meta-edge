diff --git a/lib/mbed-cloud-client/mbed-client-pal/Source/Port/Reference-Impl/OS_Specific/Linux/RTOS/pal_plat_rtos.c b/lib/mbed-cloud-client/mbed-client-pal/Source/Port/Reference-Impl/OS_Specific/Linux/RTOS/pal_plat_rtos.c
index 8c94312..4948f42 100644
--- a/lib/mbed-cloud-client/mbed-client-pal/Source/Port/Reference-Impl/OS_Specific/Linux/RTOS/pal_plat_rtos.c
+++ b/lib/mbed-cloud-client/mbed-client-pal/Source/Port/Reference-Impl/OS_Specific/Linux/RTOS/pal_plat_rtos.c
@@ -99,26 +99,8 @@ PAL_PRIVATE void palTimerThread(void const *args);
  */
 void pal_plat_osReboot(void)
 {
-//Simulator is currently for Linux only
-#if (PAL_SIMULATE_RTOS_REBOOT == 1)
-    const char *argv[] = {"0" , 0};
-    char *const envp[] = { 0 };
-    argv[0] = program_invocation_name;
-
-    PAL_LOG_INFO("pal_plat_osReboot -> simulated reboot with execve(%s).\r\n", argv[0]);
-
-    if (-1 == execve(argv[0], (char **)argv , envp))
-    {
-        PAL_LOG_ERR("child process execve failed [%s]\r\n", argv[0]);
-    }
-#else
-    PAL_LOG_INFO("Rebooting the system\r\n");
-
-    // Syncronize cached files to persistant storage.
-    sync();
-    // Reboot the device
-    reboot(RB_AUTOBOOT);
-#endif
+    PAL_LOG_INFO("pal_plat_osReboot.\r\n");
+    system("reboot");
 }
 
 /*! Initialize all data structures (semaphores, mutexs, memory pools, message queues) at system initialization.
